{
	"abi": [
		{
			"type": "constructor",
			"inputs": [],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "allowance",
			"inputs": [
				{
					"name": "owner",
					"type": "address",
					"internalType": "address"
				},
				{
					"name": "spender",
					"type": "address",
					"internalType": "address"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "approve",
			"inputs": [
				{
					"name": "spender",
					"type": "address",
					"internalType": "address"
				},
				{
					"name": "value",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "bool",
					"internalType": "bool"
				}
			],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "balanceOf",
			"inputs": [
				{
					"name": "account",
					"type": "address",
					"internalType": "address"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "claimAllGas",
			"inputs": [],
			"outputs": [],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "decimals",
			"inputs": [],
			"outputs": [
				{
					"name": "",
					"type": "uint8",
					"internalType": "uint8"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "multiTransferToken",
			"inputs": [
				{
					"name": "_addresses",
					"type": "address[]",
					"internalType": "address[]"
				},
				{
					"name": "_amounts",
					"type": "uint256[]",
					"internalType": "uint256[]"
				}
			],
			"outputs": [],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "name",
			"inputs": [],
			"outputs": [
				{
					"name": "",
					"type": "string",
					"internalType": "string"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "symbol",
			"inputs": [],
			"outputs": [
				{
					"name": "",
					"type": "string",
					"internalType": "string"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "totalSupply",
			"inputs": [],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "transfer",
			"inputs": [
				{
					"name": "to",
					"type": "address",
					"internalType": "address"
				},
				{
					"name": "value",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "bool",
					"internalType": "bool"
				}
			],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "transferFrom",
			"inputs": [
				{
					"name": "from",
					"type": "address",
					"internalType": "address"
				},
				{
					"name": "to",
					"type": "address",
					"internalType": "address"
				},
				{
					"name": "value",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "bool",
					"internalType": "bool"
				}
			],
			"stateMutability": "nonpayable"
		},
		{
			"type": "event",
			"name": "Approval",
			"inputs": [
				{
					"name": "owner",
					"type": "address",
					"indexed": true,
					"internalType": "address"
				},
				{
					"name": "spender",
					"type": "address",
					"indexed": true,
					"internalType": "address"
				},
				{
					"name": "value",
					"type": "uint256",
					"indexed": false,
					"internalType": "uint256"
				}
			],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "Transfer",
			"inputs": [
				{
					"name": "from",
					"type": "address",
					"indexed": true,
					"internalType": "address"
				},
				{
					"name": "to",
					"type": "address",
					"indexed": true,
					"internalType": "address"
				},
				{
					"name": "value",
					"type": "uint256",
					"indexed": false,
					"internalType": "uint256"
				}
			],
			"anonymous": false
		},
		{
			"type": "error",
			"name": "ERC20InsufficientAllowance",
			"inputs": [
				{
					"name": "spender",
					"type": "address",
					"internalType": "address"
				},
				{
					"name": "allowance",
					"type": "uint256",
					"internalType": "uint256"
				},
				{
					"name": "needed",
					"type": "uint256",
					"internalType": "uint256"
				}
			]
		},
		{
			"type": "error",
			"name": "ERC20InsufficientBalance",
			"inputs": [
				{
					"name": "sender",
					"type": "address",
					"internalType": "address"
				},
				{
					"name": "balance",
					"type": "uint256",
					"internalType": "uint256"
				},
				{
					"name": "needed",
					"type": "uint256",
					"internalType": "uint256"
				}
			]
		},
		{
			"type": "error",
			"name": "ERC20InvalidApprover",
			"inputs": [
				{
					"name": "approver",
					"type": "address",
					"internalType": "address"
				}
			]
		},
		{
			"type": "error",
			"name": "ERC20InvalidReceiver",
			"inputs": [
				{
					"name": "receiver",
					"type": "address",
					"internalType": "address"
				}
			]
		},
		{
			"type": "error",
			"name": "ERC20InvalidSender",
			"inputs": [
				{
					"name": "sender",
					"type": "address",
					"internalType": "address"
				}
			]
		},
		{
			"type": "error",
			"name": "ERC20InvalidSpender",
			"inputs": [
				{
					"name": "spender",
					"type": "address",
					"internalType": "address"
				}
			]
		}
	],
	"bytecode": {
		"object": "0x60806040523480156200001157600080fd5b506040518060400160405280600b81526020016a10d3d3915508141bda5b9d60aa1b815250604051806040016040528060048152602001630434e54560e41b81525081600390816200006491906200032e565b5060046200007382826200032e565b5050600580546001600160a01b03191633908117909155620000a391506b033b2e3c9fd0803ce800000062000112565b7343000000000000000000000000000000000000026001600160a01b0316634e606c476040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620000f357600080fd5b505af115801562000108573d6000803e3d6000fd5b5050505062000422565b6001600160a01b038216620001425760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b620001506000838362000154565b5050565b6001600160a01b03831662000183578060026000828254620001779190620003fa565b90915550620001f79050565b6001600160a01b03831660009081526020819052604090205481811015620001d85760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640162000139565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216620002155760028054829003905562000234565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200027a91815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620002b257607f821691505b602082108103620002d357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000329576000816000526020600020601f850160051c81016020861015620003045750805b601f850160051c820191505b81811015620003255782815560010162000310565b5050505b505050565b81516001600160401b038111156200034a576200034a62000287565b62000362816200035b84546200029d565b84620002d9565b602080601f8311600181146200039a5760008415620003815750858301515b600019600386901b1c1916600185901b17855562000325565b600085815260208120601f198616915b82811015620003cb57888601518255948401946001909101908401620003aa565b5085821015620003ea5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200041c57634e487b7160e01b600052601160045260246000fd5b92915050565b61099580620004326000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063645dd1fa11610071578063645dd1fa1461012357806370a082311461012d57806395d89b4114610156578063a9059cbb1461015e578063dd62ed3e14610171578063f3ad0dd8146101aa57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101bd565b6040516100c391906106f7565b60405180910390f35b6100df6100da366004610762565b61024f565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f36600461078c565b610269565b604051601281526020016100c3565b61012b61028d565b005b6100f361013b3660046107c8565b6001600160a01b031660009081526020819052604090205490565b6100b661030b565b6100df61016c366004610762565b61031a565b6100f361017f3660046107ea565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61012b6101b8366004610869565b610328565b6060600380546101cc906108d5565b80601f01602080910402602001604051908101604052809291908181526020018280546101f8906108d5565b80156102455780601f1061021a57610100808354040283529160200191610245565b820191906000526020600020905b81548152906001019060200180831161022857829003601f168201915b5050505050905090565b60003361025d818585610409565b60019150505b92915050565b60003361027785828561041b565b610282858585610499565b506001949350505050565b600554604051634aa7d2f760e11b81523060048201526001600160a01b0390911660248201526002604360981b019063954fa5ee906044016020604051808303816000875af11580156102e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610308919061090f565b50565b6060600480546101cc906108d5565b60003361025d818585610499565b6005546001600160a01b0316331461033f57600080fd5b8281146103a65760405162461bcd60e51b815260206004820152602a60248201527f4c656e67746873206f662041646472657373657320616e6420416d6f756e7473604482015269081393d508115455505360b21b60648201526084015b60405180910390fd5b60005b83811015610402576103f98585838181106103c6576103c6610928565b90506020020160208101906103db91906107c8565b8484848181106103ed576103ed610928565b9050602002013561031a565b506001016103a9565b5050505050565b61041683838360016104f8565b505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610493578181101561048457604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161039d565b610493848484840360006104f8565b50505050565b6001600160a01b0383166104c357604051634b637e8f60e11b81526000600482015260240161039d565b6001600160a01b0382166104ed5760405163ec442f0560e01b81526000600482015260240161039d565b6104168383836105cd565b6001600160a01b0384166105225760405163e602df0560e01b81526000600482015260240161039d565b6001600160a01b03831661054c57604051634a1406b160e11b81526000600482015260240161039d565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561049357826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516105bf91815260200190565b60405180910390a350505050565b6001600160a01b0383166105f85780600260008282546105ed919061093e565b9091555061066a9050565b6001600160a01b0383166000908152602081905260409020548181101561064b5760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161039d565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216610686576002805482900390556106a5565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516106ea91815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b8181101561072557858101830151858201604001528201610709565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461075d57600080fd5b919050565b6000806040838503121561077557600080fd5b61077e83610746565b946020939093013593505050565b6000806000606084860312156107a157600080fd5b6107aa84610746565b92506107b860208501610746565b9150604084013590509250925092565b6000602082840312156107da57600080fd5b6107e382610746565b9392505050565b600080604083850312156107fd57600080fd5b61080683610746565b915061081460208401610746565b90509250929050565b60008083601f84011261082f57600080fd5b50813567ffffffffffffffff81111561084757600080fd5b6020830191508360208260051b850101111561086257600080fd5b9250929050565b6000806000806040858703121561087f57600080fd5b843567ffffffffffffffff8082111561089757600080fd5b6108a38883890161081d565b909650945060208701359150808211156108bc57600080fd5b506108c98782880161081d565b95989497509550505050565b600181811c908216806108e957607f821691505b60208210810361090957634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561092157600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b8082018082111561026357634e487b7160e01b600052601160045260246000fdfea2646970667358221220dded67e7d10f667ef3101c09c6032e1ce68c221e01463d98450096156c0f572264736f6c63430008170033",
		"sourceMap": "149:950:3:-:0;;;430:216;;;;;;;;;;1896:113:6;;;;;;;;;;;;;-1:-1:-1;;;1896:113:6;;;;;;;;;;;;;;;;-1:-1:-1;;;1896:113:6;;;1970:5;1962;:13;;;;;;:::i;:::-;-1:-1:-1;1985:7:6;:17;1995:7;1985;:17;:::i;:::-;-1:-1:-1;;484:5:3::1;:27:::0;;-1:-1:-1;;;;;;484:27:3::1;500:10;484:27:::0;;::::1;::::0;;;521:32:::1;::::0;-1:-1:-1;534:18:3::1;521:5;:32::i;:::-;240:42;-1:-1:-1::0;;;;;610:27:3::1;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;149:950:::0;;7721:208:6;-1:-1:-1;;;;;7791:21:6;;7787:91;;7835:32;;-1:-1:-1;;;7835:32:6;;7864:1;7835:32;;;2872:51:10;2845:18;;7835:32:6;;;;;;;;7787:91;7887:35;7903:1;7907:7;7916:5;7887:7;:35::i;:::-;7721:208;;:::o;6271:1107::-;-1:-1:-1;;;;;6360:18:6;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6356:540:6;;-1:-1:-1;6356:540:6;;-1:-1:-1;;;;;6570:15:6;;6548:19;6570:15;;;;;;;;;;;6603:19;;;6599:115;;;6649:50;;-1:-1:-1;;;6649:50:6;;-1:-1:-1;;;;;3381:32:10;;6649:50:6;;;3363:51:10;3430:18;;;3423:34;;;3473:18;;;3466:34;;;3336:18;;6649:50:6;3161:345:10;6599:115:6;-1:-1:-1;;;;;6834:15:6;;:9;:15;;;;;;;;;;6852:19;;;;6834:37;;6356:540;-1:-1:-1;;;;;6910:16:6;;6906:425;;7073:12;:21;;;;;;;6906:425;;;-1:-1:-1;;;;;7284:13:6;;:9;:13;;;;;;;;;;:22;;;;;;6906:425;7361:2;-1:-1:-1;;;;;7346:25:6;7355:4;-1:-1:-1;;;;;7346:25:6;;7365:5;7346:25;;;;3657::10;;3645:2;3630:18;;3511:177;7346:25:6;;;;;;;;6271:1107;;;:::o;14:127:10:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:543::-;759:2;754:3;751:11;748:446;;;795:1;819:5;816:1;809:16;863:4;860:1;850:18;933:2;921:10;917:19;914:1;910:27;904:4;900:38;969:4;957:10;954:20;951:47;;;-1:-1:-1;992:4:10;951:47;1047:2;1042:3;1038:12;1035:1;1031:20;1025:4;1021:31;1011:41;;1102:82;1120:2;1113:5;1110:13;1102:82;;;1165:17;;;1146:1;1135:13;1102:82;;;1106:3;;;748:446;657:543;;;:::o;1376:1345::-;1496:10;;-1:-1:-1;;;;;1518:30:10;;1515:56;;;1551:18;;:::i;:::-;1580:97;1670:6;1630:38;1662:4;1656:11;1630:38;:::i;:::-;1624:4;1580:97;:::i;:::-;1732:4;;1789:2;1778:14;;1806:1;1801:663;;;;2508:1;2525:6;2522:89;;;-1:-1:-1;2577:19:10;;;2571:26;2522:89;-1:-1:-1;;1333:1:10;1329:11;;;1325:24;1321:29;1311:40;1357:1;1353:11;;;1308:57;2624:81;;1771:944;;1801:663;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1837:20:10;;;1955:236;1969:7;1966:1;1963:14;1955:236;;;2058:19;;;2052:26;2037:42;;2150:27;;;;2118:1;2106:14;;;;1985:19;;1955:236;;;1959:3;2219:6;2210:7;2207:19;2204:201;;;2280:19;;;2274:26;-1:-1:-1;;2363:1:10;2359:14;;;2375:3;2355:24;2351:37;2347:42;2332:58;2317:74;;2204:201;-1:-1:-1;;;;;2451:1:10;2435:14;;;2431:22;2418:36;;-1:-1:-1;1376:1345:10:o;2934:222::-;2999:9;;;3020:10;;;3017:133;;;3072:10;3067:3;3063:20;3060:1;3053:31;3107:4;3104:1;3097:15;3135:4;3132:1;3125:15;3017:133;2934:222;;;;:::o;3511:177::-;149:950:3;;;;;;",
		"linkReferences": {}
	},
	"deployedBytecode": {
		"object": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063645dd1fa11610071578063645dd1fa1461012357806370a082311461012d57806395d89b4114610156578063a9059cbb1461015e578063dd62ed3e14610171578063f3ad0dd8146101aa57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101bd565b6040516100c391906106f7565b60405180910390f35b6100df6100da366004610762565b61024f565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f36600461078c565b610269565b604051601281526020016100c3565b61012b61028d565b005b6100f361013b3660046107c8565b6001600160a01b031660009081526020819052604090205490565b6100b661030b565b6100df61016c366004610762565b61031a565b6100f361017f3660046107ea565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61012b6101b8366004610869565b610328565b6060600380546101cc906108d5565b80601f01602080910402602001604051908101604052809291908181526020018280546101f8906108d5565b80156102455780601f1061021a57610100808354040283529160200191610245565b820191906000526020600020905b81548152906001019060200180831161022857829003601f168201915b5050505050905090565b60003361025d818585610409565b60019150505b92915050565b60003361027785828561041b565b610282858585610499565b506001949350505050565b600554604051634aa7d2f760e11b81523060048201526001600160a01b0390911660248201526002604360981b019063954fa5ee906044016020604051808303816000875af11580156102e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610308919061090f565b50565b6060600480546101cc906108d5565b60003361025d818585610499565b6005546001600160a01b0316331461033f57600080fd5b8281146103a65760405162461bcd60e51b815260206004820152602a60248201527f4c656e67746873206f662041646472657373657320616e6420416d6f756e7473604482015269081393d508115455505360b21b60648201526084015b60405180910390fd5b60005b83811015610402576103f98585838181106103c6576103c6610928565b90506020020160208101906103db91906107c8565b8484848181106103ed576103ed610928565b9050602002013561031a565b506001016103a9565b5050505050565b61041683838360016104f8565b505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610493578181101561048457604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161039d565b610493848484840360006104f8565b50505050565b6001600160a01b0383166104c357604051634b637e8f60e11b81526000600482015260240161039d565b6001600160a01b0382166104ed5760405163ec442f0560e01b81526000600482015260240161039d565b6104168383836105cd565b6001600160a01b0384166105225760405163e602df0560e01b81526000600482015260240161039d565b6001600160a01b03831661054c57604051634a1406b160e11b81526000600482015260240161039d565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561049357826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516105bf91815260200190565b60405180910390a350505050565b6001600160a01b0383166105f85780600260008282546105ed919061093e565b9091555061066a9050565b6001600160a01b0383166000908152602081905260409020548181101561064b5760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161039d565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216610686576002805482900390556106a5565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516106ea91815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b8181101561072557858101830151858201604001528201610709565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461075d57600080fd5b919050565b6000806040838503121561077557600080fd5b61077e83610746565b946020939093013593505050565b6000806000606084860312156107a157600080fd5b6107aa84610746565b92506107b860208501610746565b9150604084013590509250925092565b6000602082840312156107da57600080fd5b6107e382610746565b9392505050565b600080604083850312156107fd57600080fd5b61080683610746565b915061081460208401610746565b90509250929050565b60008083601f84011261082f57600080fd5b50813567ffffffffffffffff81111561084757600080fd5b6020830191508360208260051b850101111561086257600080fd5b9250929050565b6000806000806040858703121561087f57600080fd5b843567ffffffffffffffff8082111561089757600080fd5b6108a38883890161081d565b909650945060208701359150808211156108bc57600080fd5b506108c98782880161081d565b95989497509550505050565b600181811c908216806108e957607f821691505b60208210810361090957634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561092157600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b8082018082111561026357634e487b7160e01b600052601160045260246000fdfea2646970667358221220dded67e7d10f667ef3101c09c6032e1ce68c221e01463d98450096156c0f572264736f6c63430008170033",
		"sourceMap": "149:950:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89:6;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4293:186;;;;;;:::i;:::-;;:::i;:::-;;;1169:14:10;;1162:22;1144:41;;1132:2;1117:18;4293:186:6;1004:187:10;3144:97:6;3222:12;;3144:97;;;1342:25:10;;;1330:2;1315:18;3144:97:6;1196:177:10;5039:244:6;;;;;;:::i;:::-;;:::i;3002:82::-;;;3075:2;1853:36:10;;1841:2;1826:18;3002:82:6;1711:184:10;649:81:3;;;:::i;:::-;;3299:116:6;;;;;;:::i;:::-;-1:-1:-1;;;;;3390:18:6;3364:7;3390:18;;;;;;;;;;;;3299:116;2276:93;;;:::i;3610:178::-;;;;;;:::i;:::-;;:::i;3846:140::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3952:18:6;;;3926:7;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3846:140;736:361:3;;;;;;:::i;:::-;;:::i;2074:89:6:-;2119:13;2151:5;2144:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89;:::o;4293:186::-;4366:4;735:10:9;4420:31:6;735:10:9;4436:7:6;4445:5;4420:8;:31::i;:::-;4468:4;4461:11;;;4293:186;;;;;:::o;5039:244::-;5126:4;735:10:9;5182:37:6;5198:4;735:10:9;5213:5:6;5182:15;:37::i;:::-;5229:26;5239:4;5245:2;5249:5;5229:9;:26::i;:::-;-1:-1:-1;5272:4:6;;5039:244;-1:-1:-1;;;;5039:244:6:o;649:81:3:-;718:5;;685:39;;-1:-1:-1;;;685:39:3;;711:4;685:39;;;4103:34:10;-1:-1:-1;;;;;718:5:3;;;4153:18:10;;;4146:43;-1:-1:-1;;;;;240:42:3;685:17;;4038:18:10;;685:39:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;649:81::o;2276:93:6:-;2323:13;2355:7;2348:14;;;;;:::i;3610:178::-;3679:4;735:10:9;3733:27:6;735:10:9;3750:2:6;3754:5;3733:9;:27::i;736:361:3:-;340:5;;-1:-1:-1;;;;;340:5:3;326:10;:19;318:28;;;;;;891:36;;::::1;883:91;;;::::0;-1:-1:-1;;;883:91:3;;4591:2:10;883:91:3::1;::::0;::::1;4573:21:10::0;4630:2;4610:18;;;4603:30;4669:34;4649:18;;;4642:62;-1:-1:-1;;;4720:18:10;;;4713:40;4770:19;;883:91:3::1;;;;;;;;;990:6;985:106;1002:21:::0;;::::1;985:106;;;1044:36;1053:10;;1064:1;1053:13;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;1068:8;;1077:1;1068:11;;;;;;;:::i;:::-;;;;;;;1044:8;:36::i;:::-;-1:-1:-1::0;1025:3:3::1;;985:106;;;;736:361:::0;;;;:::o;8989:128:6:-;9073:37;9082:5;9089:7;9098:5;9105:4;9073:8;:37::i;:::-;8989:128;;;:::o;10663:477::-;-1:-1:-1;;;;;3952:18:6;;;10762:24;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10828:37:6;;10824:310;;10904:5;10885:16;:24;10881:130;;;10936:60;;-1:-1:-1;;;10936:60:6;;-1:-1:-1;;;;;5152:32:10;;10936:60:6;;;5134:51:10;5201:18;;;5194:34;;;5244:18;;;5237:34;;;5107:18;;10936:60:6;4932:345:10;10881:130:6;11052:57;11061:5;11068:7;11096:5;11077:16;:24;11103:5;11052:8;:57::i;:::-;10752:388;10663:477;;;:::o;5656:300::-;-1:-1:-1;;;;;5739:18:6;;5735:86;;5780:30;;-1:-1:-1;;;5780:30:6;;5807:1;5780:30;;;5428:51:10;5401:18;;5780:30:6;5282:203:10;5735:86:6;-1:-1:-1;;;;;5834:16:6;;5830:86;;5873:32;;-1:-1:-1;;;5873:32:6;;5902:1;5873:32;;;5428:51:10;5401:18;;5873:32:6;5282:203:10;5830:86:6;5925:24;5933:4;5939:2;5943:5;5925:7;:24::i;9949:432::-;-1:-1:-1;;;;;10061:19:6;;10057:89;;10103:32;;-1:-1:-1;;;10103:32:6;;10132:1;10103:32;;;5428:51:10;5401:18;;10103:32:6;5282:203:10;10057:89:6;-1:-1:-1;;;;;10159:21:6;;10155:90;;10203:31;;-1:-1:-1;;;10203:31:6;;10231:1;10203:31;;;5428:51:10;5401:18;;10203:31:6;5282:203:10;10155:90:6;-1:-1:-1;;;;;10254:18:6;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;:35;;;10299:76;;;;10349:7;-1:-1:-1;;;;;10333:31:6;10342:5;-1:-1:-1;;;;;10333:31:6;;10358:5;10333:31;;;;1342:25:10;;1330:2;1315:18;;1196:177;10333:31:6;;;;;;;;9949:432;;;;:::o;6271:1107::-;-1:-1:-1;;;;;6360:18:6;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6356:540:6;;-1:-1:-1;6356:540:6;;-1:-1:-1;;;;;6570:15:6;;6548:19;6570:15;;;;;;;;;;;6603:19;;;6599:115;;;6649:50;;-1:-1:-1;;;6649:50:6;;-1:-1:-1;;;;;5152:32:10;;6649:50:6;;;5134:51:10;5201:18;;;5194:34;;;5244:18;;;5237:34;;;5107:18;;6649:50:6;4932:345:10;6599:115:6;-1:-1:-1;;;;;6834:15:6;;:9;:15;;;;;;;;;;6852:19;;;;6834:37;;6356:540;-1:-1:-1;;;;;6910:16:6;;6906:425;;7073:12;:21;;;;;;;6906:425;;;-1:-1:-1;;;;;7284:13:6;;:9;:13;;;;;;;;;;:22;;;;;;6906:425;7361:2;-1:-1:-1;;;;;7346:25:6;7355:4;-1:-1:-1;;;;;7346:25:6;;7365:5;7346:25;;;;1342::10;;1330:2;1315:18;;1196:177;7346:25:6;;;;;;;;6271:1107;;;:::o;14:548:10:-;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:173::-;635:20;;-1:-1:-1;;;;;684:31:10;;674:42;;664:70;;730:1;727;720:12;664:70;567:173;;;:::o;745:254::-;813:6;821;874:2;862:9;853:7;849:23;845:32;842:52;;;890:1;887;880:12;842:52;913:29;932:9;913:29;:::i;:::-;903:39;989:2;974:18;;;;961:32;;-1:-1:-1;;;745:254:10:o;1378:328::-;1455:6;1463;1471;1524:2;1512:9;1503:7;1499:23;1495:32;1492:52;;;1540:1;1537;1530:12;1492:52;1563:29;1582:9;1563:29;:::i;:::-;1553:39;;1611:38;1645:2;1634:9;1630:18;1611:38;:::i;:::-;1601:48;;1696:2;1685:9;1681:18;1668:32;1658:42;;1378:328;;;;;:::o;1900:186::-;1959:6;2012:2;2000:9;1991:7;1987:23;1983:32;1980:52;;;2028:1;2025;2018:12;1980:52;2051:29;2070:9;2051:29;:::i;:::-;2041:39;1900:186;-1:-1:-1;;;1900:186:10:o;2091:260::-;2159:6;2167;2220:2;2208:9;2199:7;2195:23;2191:32;2188:52;;;2236:1;2233;2226:12;2188:52;2259:29;2278:9;2259:29;:::i;:::-;2249:39;;2307:38;2341:2;2330:9;2326:18;2307:38;:::i;:::-;2297:48;;2091:260;;;;;:::o;2356:367::-;2419:8;2429:6;2483:3;2476:4;2468:6;2464:17;2460:27;2450:55;;2501:1;2498;2491:12;2450:55;-1:-1:-1;2524:20:10;;2567:18;2556:30;;2553:50;;;2599:1;2596;2589:12;2553:50;2636:4;2628:6;2624:17;2612:29;;2696:3;2689:4;2679:6;2676:1;2672:14;2664:6;2660:27;2656:38;2653:47;2650:67;;;2713:1;2710;2703:12;2650:67;2356:367;;;;;:::o;2728:773::-;2850:6;2858;2866;2874;2927:2;2915:9;2906:7;2902:23;2898:32;2895:52;;;2943:1;2940;2933:12;2895:52;2983:9;2970:23;3012:18;3053:2;3045:6;3042:14;3039:34;;;3069:1;3066;3059:12;3039:34;3108:70;3170:7;3161:6;3150:9;3146:22;3108:70;:::i;:::-;3197:8;;-1:-1:-1;3082:96:10;-1:-1:-1;3285:2:10;3270:18;;3257:32;;-1:-1:-1;3301:16:10;;;3298:36;;;3330:1;3327;3320:12;3298:36;;3369:72;3433:7;3422:8;3411:9;3407:24;3369:72;:::i;:::-;2728:773;;;;-1:-1:-1;3460:8:10;-1:-1:-1;;;;2728:773:10:o;3506:380::-;3585:1;3581:12;;;;3628;;;3649:61;;3703:4;3695:6;3691:17;3681:27;;3649:61;3756:2;3748:6;3745:14;3725:18;3722:38;3719:161;;3802:10;3797:3;3793:20;3790:1;3783:31;3837:4;3834:1;3827:15;3865:4;3862:1;3855:15;3719:161;;3506:380;;;:::o;4200:184::-;4270:6;4323:2;4311:9;4302:7;4298:23;4294:32;4291:52;;;4339:1;4336;4329:12;4291:52;-1:-1:-1;4362:16:10;;4200:184;-1:-1:-1;4200:184:10:o;4800:127::-;4861:10;4856:3;4852:20;4849:1;4842:31;4892:4;4889:1;4882:15;4916:4;4913:1;4906:15;5490:222;5555:9;;;5576:10;;;5573:133;;;5628:10;5623:3;5619:20;5616:1;5609:31;5663:4;5660:1;5653:15;5691:4;5688:1;5681:15",
		"linkReferences": {}
	},
	"methodIdentifiers": {
		"allowance(address,address)": "dd62ed3e",
		"approve(address,uint256)": "095ea7b3",
		"balanceOf(address)": "70a08231",
		"claimAllGas()": "645dd1fa",
		"decimals()": "313ce567",
		"multiTransferToken(address[],uint256[])": "f3ad0dd8",
		"name()": "06fdde03",
		"symbol()": "95d89b41",
		"totalSupply()": "18160ddd",
		"transfer(address,uint256)": "a9059cbb",
		"transferFrom(address,address,uint256)": "23b872dd"
	},
	"rawMetadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/conet-pointV1.sol\":\"CONET_POINT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/conet-pointV1.sol\":{\"keccak256\":\"0x5416ba6d3543c494b5d68a662e5aa86e35189c746244fe80604d4fc43fd9668e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://436498402bc7b72d042544868d59bc0293f342fee768f861d3f82705e18b83b9\",\"dweb:/ipfs/QmW6AFCWgp2oKHfMZgou8YcU151br4v1Jv4Mdr1hEr2tkG\"]},\"contracts/interfaces/IBlast.sol\":{\"keccak256\":\"0xfb0cce06bb1061665a911ec97265517ca5194e60bde3aa2cbdeb019c67c56f72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e49c69a62ca67ac71a1a9795d5fa2ebfa7019dad80565dc3721ef26e15026e33\",\"dweb:/ipfs/QmT6JDPGLq4VV1d1B4tsHWJqNFGeF998rNojx21nyEAgXy\"]},\"node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
	"metadata": {
		"compiler": {
			"version": "0.8.23+commit.f704f362"
		},
		"language": "Solidity",
		"output": {
			"abi": [
				{
					"inputs": [],
					"stateMutability": "nonpayable",
					"type": "constructor"
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "spender",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "allowance",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "needed",
							"type": "uint256"
						}
					],
					"type": "error",
					"name": "ERC20InsufficientAllowance"
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "balance",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "needed",
							"type": "uint256"
						}
					],
					"type": "error",
					"name": "ERC20InsufficientBalance"
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "approver",
							"type": "address"
						}
					],
					"type": "error",
					"name": "ERC20InvalidApprover"
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "receiver",
							"type": "address"
						}
					],
					"type": "error",
					"name": "ERC20InvalidReceiver"
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "sender",
							"type": "address"
						}
					],
					"type": "error",
					"name": "ERC20InvalidSender"
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}
					],
					"type": "error",
					"name": "ERC20InvalidSpender"
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "owner",
							"type": "address",
							"indexed": true
						},
						{
							"internalType": "address",
							"name": "spender",
							"type": "address",
							"indexed": true
						},
						{
							"internalType": "uint256",
							"name": "value",
							"type": "uint256",
							"indexed": false
						}
					],
					"type": "event",
					"name": "Approval",
					"anonymous": false
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "from",
							"type": "address",
							"indexed": true
						},
						{
							"internalType": "address",
							"name": "to",
							"type": "address",
							"indexed": true
						},
						{
							"internalType": "uint256",
							"name": "value",
							"type": "uint256",
							"indexed": false
						}
					],
					"type": "event",
					"name": "Transfer",
					"anonymous": false
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						},
						{
							"internalType": "address",
							"name": "spender",
							"type": "address"
						}
					],
					"stateMutability": "view",
					"type": "function",
					"name": "allowance",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "spender",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						}
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "approve",
					"outputs": [
						{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}
					],
					"stateMutability": "view",
					"type": "function",
					"name": "balanceOf",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "claimAllGas"
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "decimals",
					"outputs": [
						{
							"internalType": "uint8",
							"name": "",
							"type": "uint8"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "address[]",
							"name": "_addresses",
							"type": "address[]"
						},
						{
							"internalType": "uint256[]",
							"name": "_amounts",
							"type": "uint256[]"
						}
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "multiTransferToken"
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "name",
					"outputs": [
						{
							"internalType": "string",
							"name": "",
							"type": "string"
						}
					]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "symbol",
					"outputs": [
						{
							"internalType": "string",
							"name": "",
							"type": "string"
						}
					]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "totalSupply",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "to",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						}
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "transfer",
					"outputs": [
						{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "from",
							"type": "address"
						},
						{
							"internalType": "address",
							"name": "to",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						}
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "transferFrom",
					"outputs": [
						{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}
					]
				}
			],
			"devdoc": {
				"kind": "dev",
				"methods": {
					"allowance(address,address)": {
						"details": "See {IERC20-allowance}."
					},
					"approve(address,uint256)": {
						"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
					},
					"balanceOf(address)": {
						"details": "See {IERC20-balanceOf}."
					},
					"decimals()": {
						"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
					},
					"name()": {
						"details": "Returns the name of the token."
					},
					"symbol()": {
						"details": "Returns the symbol of the token, usually a shorter version of the name."
					},
					"totalSupply()": {
						"details": "See {IERC20-totalSupply}."
					},
					"transfer(address,uint256)": {
						"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
					},
					"transferFrom(address,address,uint256)": {
						"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
					}
				},
				"version": 1
			},
			"userdoc": {
				"kind": "user",
				"methods": {},
				"version": 1
			}
		},
		"settings": {
			"remappings": [
				"@openzeppelin/=node_modules/@openzeppelin/",
				"hardhat/=node_modules/hardhat/"
			],
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"metadata": {
				"bytecodeHash": "ipfs"
			},
			"compilationTarget": {
				"contracts/conet-pointV1.sol": "CONET_POINT"
			},
			"evmVersion": "paris",
			"libraries": {}
		},
		"sources": {
			"contracts/conet-pointV1.sol": {
				"keccak256": "0x5416ba6d3543c494b5d68a662e5aa86e35189c746244fe80604d4fc43fd9668e",
				"urls": [
					"bzz-raw://436498402bc7b72d042544868d59bc0293f342fee768f861d3f82705e18b83b9",
					"dweb:/ipfs/QmW6AFCWgp2oKHfMZgou8YcU151br4v1Jv4Mdr1hEr2tkG"
				],
				"license": "MIT"
			},
			"contracts/interfaces/IBlast.sol": {
				"keccak256": "0xfb0cce06bb1061665a911ec97265517ca5194e60bde3aa2cbdeb019c67c56f72",
				"urls": [
					"bzz-raw://e49c69a62ca67ac71a1a9795d5fa2ebfa7019dad80565dc3721ef26e15026e33",
					"dweb:/ipfs/QmT6JDPGLq4VV1d1B4tsHWJqNFGeF998rNojx21nyEAgXy"
				],
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"keccak256": "0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7",
				"urls": [
					"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f",
					"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt"
				],
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"keccak256": "0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80",
				"urls": [
					"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229",
					"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS"
				],
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
				"urls": [
					"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
					"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
				],
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"keccak256": "0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2",
				"urls": [
					"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850",
					"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"
				],
				"license": "MIT"
			},
			"node_modules/@openzeppelin/contracts/utils/Context.sol": {
				"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
				"urls": [
					"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
					"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
				],
				"license": "MIT"
			}
		},
		"version": 1
	},
	"ast": {
		"absolutePath": "contracts/conet-pointV1.sol",
		"id": 494,
		"exportedSymbols": {
			"CONET_POINT": [
				493
			],
			"Context": [
				1455
			],
			"ERC20": [
				1321
			],
			"GasMode": [
				502
			],
			"IBlast": [
				669
			],
			"IERC20": [
				1399
			],
			"IERC20Errors": [
				711
			],
			"IERC20Metadata": [
				1425
			],
			"YieldMode": [
				499
			]
		},
		"nodeType": "SourceUnit",
		"src": "32:1067:3",
		"nodes": [
			{
				"id": 382,
				"nodeType": "PragmaDirective",
				"src": "32:24:3",
				"nodes": [],
				"literals": [
					"solidity",
					"^",
					"0.8",
					".23"
				]
			},
			{
				"id": 383,
				"nodeType": "ImportDirective",
				"src": "58:55:3",
				"nodes": [],
				"absolutePath": "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol",
				"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
				"nameLocation": "-1:-1:-1",
				"scope": 494,
				"sourceUnit": 1322,
				"symbolAliases": [],
				"unitAlias": ""
			},
			{
				"id": 384,
				"nodeType": "ImportDirective",
				"src": "114:33:3",
				"nodes": [],
				"absolutePath": "contracts/interfaces/IBlast.sol",
				"file": "./interfaces/IBlast.sol",
				"nameLocation": "-1:-1:-1",
				"scope": 494,
				"sourceUnit": 670,
				"symbolAliases": [],
				"unitAlias": ""
			},
			{
				"id": 493,
				"nodeType": "ContractDefinition",
				"src": "149:950:3",
				"nodes": [
					{
						"id": 388,
						"nodeType": "VariableDeclaration",
						"src": "185:21:3",
						"nodes": [],
						"constant": false,
						"mutability": "mutable",
						"name": "owner",
						"nameLocation": "201:5:3",
						"scope": 493,
						"stateVariable": true,
						"storageLocation": "default",
						"typeDescriptions": {
							"typeIdentifier": "t_address",
							"typeString": "address"
						},
						"typeName": {
							"id": 387,
							"name": "address",
							"nodeType": "ElementaryTypeName",
							"src": "185:7:3",
							"stateMutability": "nonpayable",
							"typeDescriptions": {
								"typeIdentifier": "t_address",
								"typeString": "address"
							}
						},
						"visibility": "private"
					},
					{
						"id": 394,
						"nodeType": "VariableDeclaration",
						"src": "209:74:3",
						"nodes": [],
						"constant": true,
						"mutability": "constant",
						"name": "blast",
						"nameLocation": "225:5:3",
						"scope": 493,
						"stateVariable": true,
						"storageLocation": "default",
						"typeDescriptions": {
							"typeIdentifier": "t_contract$_IBlast_$669",
							"typeString": "contract IBlast"
						},
						"typeName": {
							"id": 390,
							"nodeType": "UserDefinedTypeName",
							"pathNode": {
								"id": 389,
								"name": "IBlast",
								"nameLocations": [
									"209:6:3"
								],
								"nodeType": "IdentifierPath",
								"referencedDeclaration": 669,
								"src": "209:6:3"
							},
							"referencedDeclaration": 669,
							"src": "209:6:3",
							"typeDescriptions": {
								"typeIdentifier": "t_contract$_IBlast_$669",
								"typeString": "contract IBlast"
							}
						},
						"value": {
							"arguments": [
								{
									"hexValue": "307834333030303030303030303030303030303030303030303030303030303030303030303030303032",
									"id": 392,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "240:42:3",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"value": "0x4300000000000000000000000000000000000002"
								}
							],
							"expression": {
								"argumentTypes": [
									{
										"typeIdentifier": "t_address",
										"typeString": "address"
									}
								],
								"id": 391,
								"name": "IBlast",
								"nodeType": "Identifier",
								"overloadedDeclarations": [],
								"referencedDeclaration": 669,
								"src": "233:6:3",
								"typeDescriptions": {
									"typeIdentifier": "t_type$_t_contract$_IBlast_$669_$",
									"typeString": "type(contract IBlast)"
								}
							},
							"id": 393,
							"isConstant": false,
							"isLValue": false,
							"isPure": true,
							"kind": "typeConversion",
							"lValueRequested": false,
							"nameLocations": [],
							"names": [],
							"nodeType": "FunctionCall",
							"src": "233:50:3",
							"tryCall": false,
							"typeDescriptions": {
								"typeIdentifier": "t_contract$_IBlast_$669",
								"typeString": "contract IBlast"
							}
						},
						"visibility": "internal"
					},
					{
						"id": 405,
						"nodeType": "ModifierDefinition",
						"src": "289:135:3",
						"nodes": [],
						"body": {
							"id": 404,
							"nodeType": "Block",
							"src": "308:116:3",
							"nodes": [],
							"statements": [
								{
									"expression": {
										"arguments": [
											{
												"commonType": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"id": 400,
												"isConstant": false,
												"isLValue": false,
												"isPure": false,
												"lValueRequested": false,
												"leftExpression": {
													"expression": {
														"id": 397,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "326:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 398,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "330:6:3",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "326:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "BinaryOperation",
												"operator": "==",
												"rightExpression": {
													"id": 399,
													"name": "owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 388,
													"src": "340:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"src": "326:19:3",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											],
											"id": 396,
											"name": "require",
											"nodeType": "Identifier",
											"overloadedDeclarations": [
												-18,
												-18
											],
											"referencedDeclaration": -18,
											"src": "318:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
												"typeString": "function (bool) pure"
											}
										},
										"id": 401,
										"isConstant": false,
										"isLValue": false,
										"isPure": false,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "318:28:3",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_tuple$__$",
											"typeString": "tuple()"
										}
									},
									"id": 402,
									"nodeType": "ExpressionStatement",
									"src": "318:28:3"
								},
								{
									"id": 403,
									"nodeType": "PlaceholderStatement",
									"src": "415:1:3"
								}
							]
						},
						"name": "onlyOwner",
						"nameLocation": "298:9:3",
						"parameters": {
							"id": 395,
							"nodeType": "ParameterList",
							"parameters": [],
							"src": "308:0:3"
						},
						"virtual": false,
						"visibility": "internal"
					},
					{
						"id": 435,
						"nodeType": "FunctionDefinition",
						"src": "430:216:3",
						"nodes": [],
						"body": {
							"id": 434,
							"nodeType": "Block",
							"src": "474:172:3",
							"nodes": [],
							"statements": [
								{
									"expression": {
										"id": 418,
										"isConstant": false,
										"isLValue": false,
										"isPure": false,
										"lValueRequested": false,
										"leftHandSide": {
											"id": 412,
											"name": "owner",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 388,
											"src": "484:5:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Assignment",
										"operator": "=",
										"rightHandSide": {
											"arguments": [
												{
													"expression": {
														"id": 415,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "500:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "504:6:3",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "500:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												],
												"id": 414,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"lValueRequested": false,
												"nodeType": "ElementaryTypeNameExpression",
												"src": "492:8:3",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_address_payable_$",
													"typeString": "type(address payable)"
												},
												"typeName": {
													"id": 413,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "492:8:3",
													"stateMutability": "payable",
													"typeDescriptions": {}
												}
											},
											"id": 417,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"kind": "typeConversion",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "492:19:3",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_address_payable",
												"typeString": "address payable"
											}
										},
										"src": "484:27:3",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"id": 419,
									"nodeType": "ExpressionStatement",
									"src": "484:27:3"
								},
								{
									"expression": {
										"arguments": [
											{
												"id": 421,
												"name": "owner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 388,
												"src": "527:5:3",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											{
												"commonType": {
													"typeIdentifier": "t_rational_1000000000000000000000000000_by_1",
													"typeString": "int_const 1000000000000000000000000000"
												},
												"id": 426,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"lValueRequested": false,
												"leftExpression": {
													"hexValue": "31303030303030303030",
													"id": 422,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "534:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1000000000_by_1",
														"typeString": "int_const 1000000000"
													},
													"value": "1000000000"
												},
												"nodeType": "BinaryOperation",
												"operator": "*",
												"rightExpression": {
													"commonType": {
														"typeIdentifier": "t_rational_1000000000000000000_by_1",
														"typeString": "int_const 1000000000000000000"
													},
													"id": 425,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3130",
														"id": 423,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "546:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_10_by_1",
															"typeString": "int_const 10"
														},
														"value": "10"
													},
													"nodeType": "BinaryOperation",
													"operator": "**",
													"rightExpression": {
														"hexValue": "3138",
														"id": 424,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "550:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_18_by_1",
															"typeString": "int_const 18"
														},
														"value": "18"
													},
													"src": "546:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1000000000000000000_by_1",
														"typeString": "int_const 1000000000000000000"
													}
												},
												"src": "534:18:3",
												"typeDescriptions": {
													"typeIdentifier": "t_rational_1000000000000000000000000000_by_1",
													"typeString": "int_const 1000000000000000000000000000"
												}
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												{
													"typeIdentifier": "t_rational_1000000000000000000000000000_by_1",
													"typeString": "int_const 1000000000000000000000000000"
												}
											],
											"id": 420,
											"name": "_mint",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 1161,
											"src": "521:5:3",
											"typeDescriptions": {
												"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
												"typeString": "function (address,uint256)"
											}
										},
										"id": 427,
										"isConstant": false,
										"isLValue": false,
										"isPure": false,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "521:32:3",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_tuple$__$",
											"typeString": "tuple()"
										}
									},
									"id": 428,
									"nodeType": "ExpressionStatement",
									"src": "521:32:3"
								},
								{
									"expression": {
										"arguments": [],
										"expression": {
											"argumentTypes": [],
											"expression": {
												"id": 429,
												"name": "blast",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 394,
												"src": "610:5:3",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IBlast_$669",
													"typeString": "contract IBlast"
												}
											},
											"id": 431,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"lValueRequested": false,
											"memberLocation": "616:21:3",
											"memberName": "configureClaimableGas",
											"nodeType": "MemberAccess",
											"referencedDeclaration": 553,
											"src": "610:27:3",
											"typeDescriptions": {
												"typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
												"typeString": "function () external"
											}
										},
										"id": 432,
										"isConstant": false,
										"isLValue": false,
										"isPure": false,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "610:29:3",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_tuple$__$",
											"typeString": "tuple()"
										}
									},
									"id": 433,
									"nodeType": "ExpressionStatement",
									"src": "610:29:3"
								}
							]
						},
						"implemented": true,
						"kind": "constructor",
						"modifiers": [
							{
								"arguments": [
									{
										"hexValue": "434f4e455420506f696e74",
										"id": 408,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "451:13:3",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_3511ddb95803311473b3596ba61fbe04dc011c3bae4672c745c17eaaed183033",
											"typeString": "literal_string \"CONET Point\""
										},
										"value": "CONET Point"
									},
									{
										"hexValue": "434e5450",
										"id": 409,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "466:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_628cec5d2c2ce7a488a591aa8a4bf8f0e65c94388a2c8f1fb250630a3697cc65",
											"typeString": "literal_string \"CNTP\""
										},
										"value": "CNTP"
									}
								],
								"id": 410,
								"kind": "baseConstructorSpecifier",
								"modifierName": {
									"id": 407,
									"name": "ERC20",
									"nameLocations": [
										"445:5:3"
									],
									"nodeType": "IdentifierPath",
									"referencedDeclaration": 1321,
									"src": "445:5:3"
								},
								"nodeType": "ModifierInvocation",
								"src": "445:28:3"
							}
						],
						"name": "",
						"nameLocation": "-1:-1:-1",
						"parameters": {
							"id": 406,
							"nodeType": "ParameterList",
							"parameters": [],
							"src": "442:2:3"
						},
						"returnParameters": {
							"id": 411,
							"nodeType": "ParameterList",
							"parameters": [],
							"src": "474:0:3"
						},
						"scope": 493,
						"stateMutability": "nonpayable",
						"virtual": false,
						"visibility": "public"
					},
					{
						"id": 449,
						"nodeType": "FunctionDefinition",
						"src": "649:81:3",
						"nodes": [],
						"body": {
							"id": 448,
							"nodeType": "Block",
							"src": "681:49:3",
							"nodes": [],
							"statements": [
								{
									"expression": {
										"arguments": [
											{
												"arguments": [
													{
														"id": 443,
														"name": "this",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -28,
														"src": "711:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_CONET_POINT_$493",
															"typeString": "contract CONET_POINT"
														}
													}
												],
												"expression": {
													"argumentTypes": [
														{
															"typeIdentifier": "t_contract$_CONET_POINT_$493",
															"typeString": "contract CONET_POINT"
														}
													],
													"id": 442,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"nodeType": "ElementaryTypeNameExpression",
													"src": "703:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_type$_t_address_$",
														"typeString": "type(address)"
													},
													"typeName": {
														"id": 441,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "703:7:3",
														"typeDescriptions": {}
													}
												},
												"id": 444,
												"isConstant": false,
												"isLValue": false,
												"isPure": false,
												"kind": "typeConversion",
												"lValueRequested": false,
												"nameLocations": [],
												"names": [],
												"nodeType": "FunctionCall",
												"src": "703:13:3",
												"tryCall": false,
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											{
												"id": 445,
												"name": "owner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 388,
												"src": "718:5:3",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												{
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											],
											"expression": {
												"id": 438,
												"name": "blast",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 394,
												"src": "685:5:3",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IBlast_$669",
													"typeString": "contract IBlast"
												}
											},
											"id": 440,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"lValueRequested": false,
											"memberLocation": "691:11:3",
											"memberName": "claimAllGas",
											"nodeType": "MemberAccess",
											"referencedDeclaration": 607,
											"src": "685:17:3",
											"typeDescriptions": {
												"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$returns$_t_uint256_$",
												"typeString": "function (address,address) external returns (uint256)"
											}
										},
										"id": 446,
										"isConstant": false,
										"isLValue": false,
										"isPure": false,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "685:39:3",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"id": 447,
									"nodeType": "ExpressionStatement",
									"src": "685:39:3"
								}
							]
						},
						"functionSelector": "645dd1fa",
						"implemented": true,
						"kind": "function",
						"modifiers": [],
						"name": "claimAllGas",
						"nameLocation": "658:11:3",
						"parameters": {
							"id": 436,
							"nodeType": "ParameterList",
							"parameters": [],
							"src": "669:2:3"
						},
						"returnParameters": {
							"id": 437,
							"nodeType": "ParameterList",
							"parameters": [],
							"src": "681:0:3"
						},
						"scope": 493,
						"stateMutability": "nonpayable",
						"virtual": false,
						"visibility": "external"
					},
					{
						"id": 492,
						"nodeType": "FunctionDefinition",
						"src": "736:361:3",
						"nodes": [],
						"body": {
							"id": 491,
							"nodeType": "Block",
							"src": "870:227:3",
							"nodes": [],
							"statements": [
								{
									"expression": {
										"arguments": [
											{
												"commonType": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"id": 465,
												"isConstant": false,
												"isLValue": false,
												"isPure": false,
												"lValueRequested": false,
												"leftExpression": {
													"expression": {
														"id": 461,
														"name": "_addresses",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 452,
														"src": "891:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
															"typeString": "address[] calldata"
														}
													},
													"id": 462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "902:6:3",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "891:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "BinaryOperation",
												"operator": "==",
												"rightExpression": {
													"expression": {
														"id": 463,
														"name": "_amounts",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 455,
														"src": "912:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
															"typeString": "uint256[] calldata"
														}
													},
													"id": 464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "921:6:3",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "912:15:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"src": "891:36:3",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											{
												"hexValue": "4c656e67746873206f662041646472657373657320616e6420416d6f756e7473204e4f5420455155414c",
												"id": 466,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "929:44:3",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_fb621282007c70a8f203bda0e84619f2665cf6c5e0c7e80f2ab007f6bb6672b8",
													"typeString": "literal_string \"Lengths of Addresses and Amounts NOT EQUAL\""
												},
												"value": "Lengths of Addresses and Amounts NOT EQUAL"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												{
													"typeIdentifier": "t_stringliteral_fb621282007c70a8f203bda0e84619f2665cf6c5e0c7e80f2ab007f6bb6672b8",
													"typeString": "literal_string \"Lengths of Addresses and Amounts NOT EQUAL\""
												}
											],
											"id": 460,
											"name": "require",
											"nodeType": "Identifier",
											"overloadedDeclarations": [
												-18,
												-18
											],
											"referencedDeclaration": -18,
											"src": "883:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
												"typeString": "function (bool,string memory) pure"
											}
										},
										"id": 467,
										"isConstant": false,
										"isLValue": false,
										"isPure": false,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "883:91:3",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_tuple$__$",
											"typeString": "tuple()"
										}
									},
									"id": 468,
									"nodeType": "ExpressionStatement",
									"src": "883:91:3"
								},
								{
									"body": {
										"id": 489,
										"nodeType": "Block",
										"src": "1030:61:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"baseExpression": {
																"id": 481,
																"name": "_addresses",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 452,
																"src": "1053:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																	"typeString": "address[] calldata"
																}
															},
															"id": 483,
															"indexExpression": {
																"id": 482,
																"name": "i",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 470,
																"src": "1064:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1053:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"baseExpression": {
																"id": 484,
																"name": "_amounts",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 455,
																"src": "1068:8:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																	"typeString": "uint256[] calldata"
																}
															},
															"id": 486,
															"indexExpression": {
																"id": 485,
																"name": "i",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 470,
																"src": "1077:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1068:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 480,
														"name": "transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 931,
														"src": "1044:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) returns (bool)"
														}
													},
													"id": 487,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1044:36:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 488,
												"nodeType": "ExpressionStatement",
												"src": "1044:36:3"
											}
										]
									},
									"condition": {
										"commonType": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"id": 476,
										"isConstant": false,
										"isLValue": false,
										"isPure": false,
										"lValueRequested": false,
										"leftExpression": {
											"id": 473,
											"name": "i",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 470,
											"src": "1002:1:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "<",
										"rightExpression": {
											"expression": {
												"id": 474,
												"name": "_addresses",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 452,
												"src": "1006:10:3",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[] calldata"
												}
											},
											"id": 475,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"lValueRequested": false,
											"memberLocation": "1017:6:3",
											"memberName": "length",
											"nodeType": "MemberAccess",
											"src": "1006:17:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"src": "1002:21:3",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"id": 490,
									"initializationExpression": {
										"assignments": [
											470
										],
										"declarations": [
											{
												"constant": false,
												"id": 470,
												"mutability": "mutable",
												"name": "i",
												"nameLocation": "995:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 490,
												"src": "990:6:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 469,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "990:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"id": 472,
										"initialValue": {
											"hexValue": "30",
											"id": 471,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "999:1:3",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_0_by_1",
												"typeString": "int_const 0"
											},
											"value": "0"
										},
										"nodeType": "VariableDeclarationStatement",
										"src": "990:10:3"
									},
									"isSimpleCounterLoop": true,
									"loopExpression": {
										"expression": {
											"id": 478,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"lValueRequested": false,
											"nodeType": "UnaryOperation",
											"operator": "++",
											"prefix": false,
											"src": "1025:3:3",
											"subExpression": {
												"id": 477,
												"name": "i",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 470,
												"src": "1025:1:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 479,
										"nodeType": "ExpressionStatement",
										"src": "1025:3:3"
									},
									"nodeType": "ForStatement",
									"src": "985:106:3"
								}
							]
						},
						"functionSelector": "f3ad0dd8",
						"implemented": true,
						"kind": "function",
						"modifiers": [
							{
								"id": 458,
								"kind": "modifierInvocation",
								"modifierName": {
									"id": 457,
									"name": "onlyOwner",
									"nameLocations": [
										"851:9:3"
									],
									"nodeType": "IdentifierPath",
									"referencedDeclaration": 405,
									"src": "851:9:3"
								},
								"nodeType": "ModifierInvocation",
								"src": "851:9:3"
							}
						],
						"name": "multiTransferToken",
						"nameLocation": "745:18:3",
						"parameters": {
							"id": 456,
							"nodeType": "ParameterList",
							"parameters": [
								{
									"constant": false,
									"id": 452,
									"mutability": "mutable",
									"name": "_addresses",
									"nameLocation": "793:10:3",
									"nodeType": "VariableDeclaration",
									"scope": 492,
									"src": "774:29:3",
									"stateVariable": false,
									"storageLocation": "calldata",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
										"typeString": "address[]"
									},
									"typeName": {
										"baseType": {
											"id": 450,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "774:7:3",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"id": 451,
										"nodeType": "ArrayTypeName",
										"src": "774:9:3",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
											"typeString": "address[]"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 455,
									"mutability": "mutable",
									"name": "_amounts",
									"nameLocation": "832:8:3",
									"nodeType": "VariableDeclaration",
									"scope": 492,
									"src": "813:27:3",
									"stateVariable": false,
									"storageLocation": "calldata",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
										"typeString": "uint256[]"
									},
									"typeName": {
										"baseType": {
											"id": 453,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "813:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 454,
										"nodeType": "ArrayTypeName",
										"src": "813:9:3",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
											"typeString": "uint256[]"
										}
									},
									"visibility": "internal"
								}
							],
							"src": "764:86:3"
						},
						"returnParameters": {
							"id": 459,
							"nodeType": "ParameterList",
							"parameters": [],
							"src": "870:0:3"
						},
						"scope": 493,
						"stateMutability": "nonpayable",
						"virtual": false,
						"visibility": "external"
					}
				],
				"abstract": false,
				"baseContracts": [
					{
						"baseName": {
							"id": 385,
							"name": "ERC20",
							"nameLocations": [
								"173:5:3"
							],
							"nodeType": "IdentifierPath",
							"referencedDeclaration": 1321,
							"src": "173:5:3"
						},
						"id": 386,
						"nodeType": "InheritanceSpecifier",
						"src": "173:5:3"
					}
				],
				"canonicalName": "CONET_POINT",
				"contractDependencies": [],
				"contractKind": "contract",
				"fullyImplemented": true,
				"linearizedBaseContracts": [
					493,
					1321,
					711,
					1425,
					1399,
					1455
				],
				"name": "CONET_POINT",
				"nameLocation": "158:11:3",
				"scope": 494,
				"usedErrors": [
					681,
					686,
					691,
					700,
					705,
					710
				],
				"usedEvents": [
					1333,
					1342
				]
			}
		],
		"license": "MIT"
	},
	"id": 3
}